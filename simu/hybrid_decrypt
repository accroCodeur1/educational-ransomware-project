from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import serialization, hashes

# === Déchiffre la clé Fernet avec RSA (privée) ===
with open("private.pem", "rb") as f:
    priv_key = serialization.load_pem_private_key(f.read(), password=None)

with open("restore_key.enc", "rb") as f:
    enc_key = f.read()

fernet_key = priv_key.decrypt(
    enc_key,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

# === Utilise la clé Fernet pour déchiffrer l'archive ===
fernet = Fernet(fernet_key)

with open("data_archive.zip.locked", "rb") as f:
    encrypted_data = f.read()

decrypted_data = fernet.decrypt(encrypted_data)

# === Sauvegarde l’archive ZIP restaurée ===
with open("data_archive_restored.zip", "wb") as f:
    f.write(decrypted_data)

print("[+] Fichiers restaurés dans data_archive_restored.zip")
